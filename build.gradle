import org.flywaydb.gradle.task.FlywayInfoTask
import org.flywaydb.gradle.task.FlywayMigrateTask

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.2.0.RELEASE'
    id "org.sonarqube" version "2.8"
    id 'jacoco'
    id "org.flywaydb.flyway" version "6.1.0"
}

group 'com.algalopez.tunturi'
version project_version
sourceCompatibility = 11

apply from: 'docker/docker.gradle'

repositories {
    mavenCentral()
}

wrapper {
    gradleVersion = '6.0.1'
}

dependencies {

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: spring_boot_version
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: spring_boot_version
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: spring_boot_version
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: spring_boot_version
    implementation group: 'org.springframework.security.oauth.boot', name: 'spring-security-oauth2-autoconfigure', version: spring_boot_version
    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: mariadb_version
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: swagger_version
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: swagger_version

    compileOnly group: 'org.projectlombok', name: 'lombok', version: lombok_version
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombok_version

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: spring_boot_version
    testImplementation group: 'org.springframework.security', name: 'spring-security-test', version: spring_security_version

    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: lombok_version
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombok_version
}

sonarqube {
    properties {
        property 'sonar.projectKey', 'Tunturi'
        property 'sonar.projectName', 'Tunturi'
        property 'sonar.projectVersion', version
        property 'sonar.language', 'java'
        property 'sonar.sources', 'src/main/java'
        property 'sonar.tests', 'src/test/java'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.exclusions', '**/TunturiApplication.java, **/*Config.java, **/*Constants.java'
        property 'sonar.coverage.exclusions', '**/TunturiApplication.java, **/*Config.java, **/*Constants.java'
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
    }
}

task createDatabase(type: Exec) {
    group = 'tunturi'
    commandLine 'sh', './database/PrepareDatabase.sh'
}

task populateDatabase(type: Exec) {
    group = 'tunturi'
    commandLine 'sh', './database/PopulateDatabase.sh'
}

def dbPreClosure = {
    url = 'jdbc:mariadb://127.0.0.1:10301/tunturi'
    user = 'user'
    password = 'pass'
    locations = ["filesystem:${projectDir}/database/migration", "filesystem:${projectDir}/database/pre"]
}

def dbClosure = {
    url = 'jdbc:mariadb://127.0.0.1:10301/tunturi'
    user = 'user'
    password = 'pass'
    locations = ["filesystem:${projectDir}/database/migration"]
}

flyway dbClosure
task flywayMigratePre(type: FlywayMigrateTask) { configure dbPreClosure }
task flywayInfoPre(type: FlywayInfoTask) { configure dbPreClosure }

task createDb() {
    group 'tunturi'
    flywayInfo.mustRunAfter(flywayMigrate)
    flywayMigrate.mustRunAfter(flywayClean)
    dependsOn (["flywayClean", "flywayMigrate", "flywayInfo"].asList())
}

task createDbPre() {
    group 'tunturi'
    flywayInfoPre.mustRunAfter(flywayMigratePre)
    flywayMigratePre.mustRunAfter(flywayClean)
    dependsOn (["flywayClean", "flywayMigratePre", "flywayInfoPre"].asList())
}

task cleanArtifacts(type: Delete) {
    group 'tunturi'
    delete('deploy/docker')
    delete('deploy/artifact')
    delete fileTree('deploy').matching {
        exclude '.gitkeep'
    }
}

task copyArtifacts(type: Copy) {
    group 'tunturi'

    copy {
        from('build/libs/') {
            include 'Tunturi-*.jar'
        }
        into "deploy/artifact"
    }

    copy {
        from('build/resources/test/') {
            include '*.properties'
        }
        into "deploy/configuration/"
    }

    copy {
        from('build/resources/main/') {
            include 'logback*.xml'
            include 'application.properties'
        }
        into "deploy/configuration/"
    }

    copy {
        from('.') {
            include 'README.md'
        }
        into "deploy"
    }
}

task zipArtifacts(type: Zip, dependsOn: ['copyArtifacts']) {
    group 'tunturi'

    from "deploy/"
    exclude '*.zip'
    exclude '.gitkeep'
    destinationDirectory = file('deploy')
}
